/*
 * Graph Service
 * Graph Service API
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.7.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

export const options = {
  vus: 100,
  duration: '10s',
  thresholds: {
    checks: ['rate>=0.995'],
    http_req_duration: ['avg<100', 'p(95)<200'],
    http_req_failed: ['rate<0.005'],
    http_reqs: ['rate>=256']
  },
  noConnectionReuse: true,
};

const BASE_URL = "http://localhost:3000";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.


export default function() {
    group("/api/update-graph", () => {

        // Request No. 1: ApiController_updateGraph
        {
            let url = BASE_URL + `/api/update-graph`;
            let body = {"dsnpId": "2", "connections": {"data": [
                {
                    "dsnpId": "3",
                    "privacyType": "public",
                    "direction": "connectionTo",
                    "connectionType": "follow"
                }
            ]}, "graphKeyPairs": []};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Got 201 response": (r) => r.status === 201,
                "Repsonse contains referenceId": ({ body: bodyStr }) => {
                    try {
                        const body = JSON.parse(bodyStr);
                        return Object.keys(body).includes("referenceId");
                    } catch (e) {
                        return false;
                    }
                }
            });
        }
    });

    group("/api/graphs", () => {
        const msaIds = ["2", "3", "4"];

        // Request No. 1: ApiController_getGraphs
        {
            let url = BASE_URL + `/api/graphs`;
            let body = {"dsnpIds": msaIds, "privacyType": "public", "graphKeyPairs": []};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Got 200 response": (r) => r.status === 200,
                "Response contained requested graphs": ({ body: bodyStr }) => {
                    try {
                    const body = JSON.parse(bodyStr);
                    for (const msaId of msaIds) {
                        if (!body.some((userGraph) =>userGraph.dsnpId === msaId)) {
                            return false;
                        }
                    }

                    return true;
                } catch (e) {
                    return false;
                }
                }
            });
        }
    });

    group("/api/health", () => {

        // Request No. 1: ApiController_health
        {
            let url = BASE_URL + `/api/health`;
            let request = http.get(url);

            check(request, {
                "Service is healthy": (r) => r.status === 200
            });
        }
    });

    group("/api/watch-graphs", () => {

        // Request No. 1: ApiController_watchGraphs
        {
            let url = BASE_URL + `/api/watch-graphs`;
            let body = {"dsnpIds": ["2"], "webhookEndpoint": "http://localhost:3000/webhook"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Got 200 response": (r) => r.status === 200,
                "Response body is correct": ({ body }) => body === JSON.stringify({ status: 200, data: "Successfully started watching graphs" }),
            });
        }
    });

}
